# Active Storage Integration Guide
## Overview
Complete guide for implementing and optimizing Active Storage in Rails applications, covering setup, configuration, and advanced usage patterns.

## Basic Setup
### Installation
```ruby
# Run Active Storage installer
rails active_storage:install

# Run migrations
rails db:migrate
```

### Model Configuration
```ruby
class User < ApplicationRecord
  # Single attachment
  has_one_attached :avatar
  
  # Multiple attachments
  has_many_attached :photos
  
  # Validations
  validates :avatar, content_type: ['image/png', 'image/jpeg'],
                    size: { less_than: 5.megabytes }
end
```

## Storage Services
### Local Storage Configuration
```yaml
# config/storage.yml
local:
  service: Disk
  root: <%= Rails.root.join("storage") %>
```

### Cloud Storage Setup
```yaml
# config/storage.yml
amazon:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: us-east-1
  bucket: your-bucket-name

google:
  service: GCS
  credentials: <%= Rails.root.join("path/to/keyfile.json") %>
  project: your-project
  bucket: your-bucket-name

azure:
  service: AzureStorage
  storage_account_name: your_account_name
  storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :access_key) %>
  container: your-container-name
```

## Direct Uploads
### JavaScript Setup
```javascript
// app/javascript/packs/direct_uploads.js
addEventListener("direct-upload:initialize", event => {
  const { target, detail } = event
  const { id, file } = detail
  target.insertAdjacentHTML("beforebegin", `
    <div id="direct-upload-${id}" class="direct-upload">
      <div class="direct-upload__progress" style="width: 0%"></div>
    </div>
  `)
})

addEventListener("direct-upload:progress", event => {
  const { id, progress } = event.detail
  const progressElement = document.querySelector(`#direct-upload-${id} .direct-upload__progress`)
  progressElement.style.width = `${progress}%`
})
```

### View Integration
```erb
<%# app/views/uploads/new.html.erb %>
<%= form_with(model: @user, local: true) do |form| %>
  <%= form.file_field :avatar, direct_upload: true %>
  <%= form.submit %>
<% end %>
```

## Image Processing
### Variant Creation
```ruby
class User < ApplicationRecord
  has_one_attached :avatar do |attachable|
    attachable.variant :thumb, resize_to_limit: [100, 100]
    attachable.variant :medium, resize_to_limit: [300, 300]
    attachable.variant :large, resize_to_limit: [800, 800]
  end
end
```

### Using Variants
```erb
<%# Display variants %>
<%= image_tag user.avatar.variant(:thumb) %>
<%= image_tag user.avatar.variant(:medium) %>
```

## Background Jobs
### Processing Configuration
```ruby
# config/application.rb
config.active_storage.queue = :active_storage_analysis

# app/jobs/process_avatar_job.rb
class ProcessAvatarJob < ApplicationJob
  queue_as :active_storage_analysis

  def perform(user)
    user.avatar.analyze
    user.avatar.variant(:thumb).process
  end
end
```

## Security
### Content Type Validation
```ruby
class User < ApplicationRecord
  has_one_attached :avatar do |attachable|
    attachable.variant :thumb, resize_to_limit: [100, 100]
  end
  
  validates :avatar,
    content_type: { 
      in: %w[image/jpeg image/png],
      message: 'must be JPEG or PNG'
    },
    size: { 
      less_than: 5.megabytes,
      message: 'should be less than 5MB'
    }
end
```

### Private Storage
```ruby
# config/routes.rb
Rails.application.routes.draw do
  get 'private/:signed_id/*filename',
    to: 'active_storage/blobs/redirect#show',
    as: :rails_service_blob
end

# app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  before_action :authenticate_user!
end
```

## Performance Optimization
### Eager Loading
```ruby
# In controllers
@users = User.with_attached_avatar.all

# In views
<% @users.each do |user| %>
  <%= image_tag user.avatar %>
<% end %>
```

### Caching Strategy
```ruby
# config/environments/production.rb
config.active_storage.service = :amazon
config.active_storage.variable_content_types = %w(
  image/png
  image/gif
  image/jpeg
  image/webp
)

# In views with caching
<% cache user do %>
  <%= image_tag user.avatar.variant(:thumb) %>
<% end %>
```

## Error Handling
### Upload Error Management
```ruby
class UploadsController < ApplicationController
  def create
    @user.avatar.attach(params[:avatar])
    if @user.save
      redirect_to @user, notice: 'Upload successful'
    else
      render :new, status: :unprocessable_entity
    end
  rescue ActiveStorage::IntegrityError
    flash.now[:alert] = "Upload failed: File type not supported"
    render :new, status: :unprocessable_entity
  end
end
```

## Testing
### System Tests
```ruby
# test/system/avatar_uploads_test.rb
require "application_system_test_case"

class AvatarUploadsTest < ApplicationSystemTestCase
  test "uploading an avatar" do
    visit new_user_path
    
    attach_file "Avatar", file_fixture("avatar.png")
    click_on "Upload"
    
    assert_selector "img[src*='avatar.png']"
  end
end
```

### Unit Tests
```ruby
# test/models/user_test.rb
require "test_helper"

class UserTest < ActiveSupport::TestCase
  def setup
    @user = users(:one)
  end

  test "should have attached avatar" do
    @user.avatar.attach(
      io: File.open(Rails.root.join('test', 'fixtures', 'files', 'avatar.png')),
      filename: 'avatar.png',
      content_type: 'image/png'
    )
    assert @user.avatar.attached?
  end
end
```

## Cleanup and Maintenance
### Purge Unattached Files
```ruby
# config/schedule.rb (with whenever gem)
every 1.day do
  runner "ActiveStorage::Blob.unattached.where('active_storage_blobs.created_at <= ?', 2.days.ago).find_each(&:purge_later)"
end
```