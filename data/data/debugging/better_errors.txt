# Better Rails Errors Guide

## Error Handling Architecture
```ruby
# Application-wide error handling
class ApplicationController < ActionController::Base
  rescue_from StandardError, with: :handle_standard_error
  rescue_from ActiveRecord::RecordNotFound, with: :handle_not_found
  rescue_from ActionController::ParameterMissing, with: :handle_parameter_missing
  rescue_from ActiveRecord::RecordInvalid, with: :handle_validation_error
  
  private
  
  def handle_standard_error(exception)
    ErrorReporter.report(exception)
    respond_to do |format|
      format.html { render 'errors/internal_error', status: :internal_server_error }
      format.json { render json: { error: 'Internal Server Error' }, status: :internal_server_error }
    end
  end
  
  def handle_not_found(exception)
    respond_to do |format|
      format.html { render 'errors/not_found', status: :not_found }
      format.json { render json: { error: 'Resource not found' }, status: :not_found }
    end
  end
end
```

## Custom Error Classes
```ruby
module Errors
  class ApplicationError < StandardError
    attr_reader :status, :code, :details
    
    def initialize(message = nil, status: nil, code: nil, details: {})
      @status = status || :internal_server_error
      @code = code || 'ERROR_DEFAULT'
      @details = details
      super(message || 'An unexpected error occurred')
    end
  end
  
  class AuthenticationError < ApplicationError
    def initialize(message = 'Authentication failed')
      super(message, status: :unauthorized, code: 'AUTH_ERROR')
    end
  end
  
  class AuthorizationError < ApplicationError
    def initialize(message = 'Not authorized')
      super(message, status: :forbidden, code: 'ACCESS_DENIED')
    end
  end
  
  class ValidationError < ApplicationError
    def initialize(errors)
      super(
        'Validation failed',
        status: :unprocessable_entity,
        code: 'VALIDATION_ERROR',
        details: { errors: errors }
      )
    end
  end
end
```

## Error Reporting Service
```ruby
class ErrorReporter
  class << self
    def report(exception, context = {})
      new(exception, context).report
    end
  end
  
  def initialize(exception, context = {})
    @exception = exception
    @context = context
  end
  
  def report
    log_error
    notify_error_service
    notify_developers if critical?
  end
  
  private
  
  attr_reader :exception, :context
  
  def log_error
    Rails.logger.error(formatted_error)
  end
  
  def notify_error_service
    # Integration with error tracking service (e.g., Sentry, Bugsnag)
    Sentry.capture_exception(
      exception,
      extra: context,
      tags: error_tags
    )
  end
  
  def notify_developers
    ErrorMailer.critical_error(
      exception: exception,
      context: context
    ).deliver_later
  end
  
  def formatted_error
    {
      message: exception.message,
      backtrace: exception.backtrace&.first(5),
      context: context,
      timestamp: Time.current
    }
  end
end
```

## Development Environment Configuration
```ruby
# config/environments/development.rb
Rails.application.configure do
  # Show full error reports
  config.consider_all_requests_local = true
  
  # Enable better_errors
  config.middleware.use BetterErrors::Middleware
  BetterErrors.application_root = Rails.root
  
  # Configure error page features
  BetterErrors.editor = :vscode
end
```

## Custom Error Pages
```ruby
# config/application.rb
module YourApplication
  class Application < Rails::Application
    config.exceptions_app = self.routes
  end
end

# config/routes.rb
Rails.application.routes.draw do
  match '/404', to: 'errors#not_found', via: :all
  match '/422', to: 'errors#unprocessable_entity', via: :all
  match '/500', to: 'errors#internal_server_error', via: :all
end

# app/controllers/errors_controller.rb
class ErrorsController < ApplicationController
  def not_found
    respond_to do |format|
      format.html { render status: 404 }
      format.json { render json: { error: 'Not found' }, status: 404 }
    end
  end
end
```

## Error Views
```erb
<%# app/views/errors/not_found.html.erb %>
<div class="error-page">
  <h1>404 - Page Not Found</h1>
  <p>The page you're looking for doesn't exist.</p>
  <%= link_to 'Go Home', root_path, class: 'button' %>
</div>

<%# app/views/errors/internal_error.html.erb %>
<div class="error-page">
  <h1>500 - Internal Server Error</h1>
  <p>Something went wrong. Our team has been notified.</p>
  <% if Rails.env.development? %>
    <div class="error-details">
      <pre><%= @exception.message %></pre>
      <pre><%= @exception.backtrace.join("\n") %></pre>
    </div>
  <% end %>
</div>
```

## API Error Handling
```ruby
module Api
  class BaseController < ApplicationController
    rescue_from StandardError do |e|
      handle_error(e)
    end
    
    private
    
    def handle_error(exception)
      case exception
      when ActiveRecord::RecordNotFound
        error_response('Resource not found', :not_found)
      when ActiveRecord::RecordInvalid
        validation_error_response(exception.record)
      when Errors::AuthenticationError
        error_response('Authentication failed', :unauthorized)
      else
        internal_error_response(exception)
      end
    end
    
    def error_response(message, status)
      render json: {
        error: {
          message: message,
          status: status,
          code: status.to_s.upcase
        }
      }, status: status
    end
    
    def validation_error_response(record)
      render json: {
        error: {
          message: 'Validation failed',
          status: :unprocessable_entity,
          details: record.errors.messages
        }
      }, status: :unprocessable_entity
    end
  end
end
```

## Testing Error Handling
```ruby
RSpec.describe ErrorsController, type: :controller do
  describe 'GET #not_found' do
    it 'returns 404 status code' do
      get :not_found
      expect(response).to have_http_status(:not_found)
    end
    
    it 'renders not_found template' do
      get :not_found
      expect(response).to render_template(:not_found)
    end
  end
end

RSpec.describe 'Error handling', type: :request do
  it 'handles record not found' do
    get '/api/users/999999'
    expect(response).to have_http_status(:not_found)
    expect(json_response[:error][:message]).to eq('Resource not found')
  end
end
```

## Error Monitoring Integration
```ruby
# config/initializers/sentry.rb
Sentry.init do |config|
  config.dsn = ENV['SENTRY_DSN']
  config.breadcrumbs_logger = [:active_support_logger, :http_logger]
  
  config.traces_sample_rate = 0.5
  config.send_default_pii = false
  
  config.before_send = lambda do |event, hint|
    if hint[:exception].is_a?(ActiveRecord::RecordNotFound)
      nil  # Don't send to Sentry
    else
      event
    end
  end
end
```

## Development Tools
```ruby
# Gemfile
group :development do
  gem 'better_errors'
  gem 'binding_of_caller'
  gem 'pry-rails'
  gem 'pry-byebug'
end

# Custom development error page
class BetterErrors::ErrorPage
  def self.template
    @template ||= ERB.new(File.read(
      Rails.root.join('lib/templates/error_page.html.erb')
    ))
  end
end
```

